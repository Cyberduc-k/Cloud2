apiVersion: v1
kind: List
metadata: {}
items:
  # ROUTER
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: router
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
    spec:
      rules:
        - http:
            paths:
              - path: /ui
                pathType: Prefix
                backend:
                  service:
                    name: front
                    port:
                      number: 8090
              - path: /login
                pathType: Exact
                backend:
                  service:
                    name: login
                    port:
                      number: 8081
              - path: /highscores
                pathType: Exact
                backend:
                  service:
                    name: highscores
                    port:
                      number: 8085
              - path: /sudokus/start
                pathType: Exact
                backend:
                  service:
                    name: startusdoku
                    port:
                      number: 8082
              - path: /sudokus/stop
                pathType: Exact
                backend:
                  service:
                    name: stopsudoku
                    port:
                      number: 8084

  # FRONT
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: front
      name: front
    spec:
      type: NodePort
      ports:
        - name: "8090"
          port: 8090
          targetPort: 8081
          nodePort: 30040
      selector:
        app: front
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: front
      name: front
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: front
      strategy: {}
      template:
        metadata:
          labels:
            app: front
        spec:
          containers:
            - image: sudokus/front
              imagePullPolicy: IfNotPresent
              name: front
              ports:
                - containerPort: 8081
              resources: {}
          restartPolicy: Always
    status: {}

  # LOGIN
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: login
      name: login
    spec:
      type: NodePort
      ports:
        - name: "8081"
          port: 8081
          targetPort: 8081
          nodePort: 30031
      selector:
        app: login
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: login
      name: login
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: login
      strategy: {}
      template:
        metadata:
          labels:
            app: login
        spec:
          containers:
            - env:
                - name: MONGODB_CONNECTION
                  value: mongodb
                - name: MONGODB_PASSWORD
                  value: admin
                - name: MONGODB_USER
                  value: admin
              image: sudokus/login
              imagePullPolicy: IfNotPresent
              name: login
              ports:
                - containerPort: 8081
              resources: {}
          restartPolicy: Always
    status: {}

  # HIGHSCORES
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: highscores
      name: highscores
    spec:
      type: NodePort
      ports:
        - name: "8085"
          port: 8085
          targetPort: 8081
          nodePort: 30035
      selector:
        app: highscores
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: highscores
      name: highscores
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: highscores
      strategy: {}
      template:
        metadata:
          labels:
            app: highscores
        spec:
          containers:
            - env:
                - name: MONGODB_CONNECTION
                  value: mongodb
                - name: MONGODB_PASSWORD
                  value: admin
                - name: MONGODB_USER
                  value: admin
              image: sudokus/highscores
              imagePullPolicy: IfNotPresent
              name: highscores
              ports:
                - containerPort: 8081
              resources: {}
          restartPolicy: Always
    status: {}

  # START SUDOKU
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: startsudoku
      name: startsudoku
    spec:
      type: NodePort
      ports:
        - name: "8082"
          port: 8082
          targetPort: 8081
          nodePort: 30032
      selector:
        app: startsudoku
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: startsudoku
      name: startsudoku
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: startsudoku
      strategy: {}
      template:
        metadata:
          labels:
            app: startsudoku
        spec:
          containers:
            - env:
                - name: MONGODB_CONNECTION
                  value: mongodb
                - name: MONGODB_PASSWORD
                  value: admin
                - name: MONGODB_USER
                  value: admin
                - name: RABBITMQ_CONNECTION
                  value: rabbitmq
                - name: RABBITMQ_PASSWORD
                  value: bunny
                - name: RABBITMQ_USER
                  value: bunny
              image: sudokus/start
              imagePullPolicy: IfNotPresent
              name: startsudoku
              ports:
                - containerPort: 8081
              resources: {}
          restartPolicy: Always
    status: {}
  
  # GENERATE SUDOKU
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: generatesudoku
      name: generatesudoku
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: generatesudoku
      strategy: {}
      template:
        metadata:
          labels:
            app: generatesudoku
        spec:
          containers:
            - env:
                - name: MONGODB_CONNECTION
                  value: mongodb
                - name: MONGODB_PASSWORD
                  value: admin
                - name: MONGODB_USER
                  value: admin
                - name: RABBITMQ_CONNECTION
                  value: rabbitmq
                - name: RABBITMQ_PASSWORD
                  value: bunny
                - name: RABBITMQ_USER
                  value: bunny
              image: sudokus/generate
              imagePullPolicy: IfNotPresent
              name: generatesudoku
              ports:
                - containerPort: 8081
              resources: {}
          restartPolicy: Always
    status: {}

  # STOP SUDOKU
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: stopsudoku
      name: stopsudoku
    spec:
      type: NodePort
      ports:
        - name: "8084"
          port: 8084
          targetPort: 8081
          nodePort: 30034
      selector:
        app: stopsudoku
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: stopsudoku
      name: stopsudoku
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: stopsudoku
      strategy: {}
      template:
        metadata:
          labels:
            app: stopsudoku
        spec:
          containers:
            - env:
                - name: MONGODB_CONNECTION
                  value: mongodb
                - name: MONGODB_PASSWORD
                  value: admin
                - name: MONGODB_USER
                  value: admin
              image: sudokus/stop
              imagePullPolicy: IfNotPresent
              name: stopsudoku
              ports:
                - containerPort: 8081
              resources: {}
          restartPolicy: Always
    status: {}
  
  # MONGODB
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: mongodb
      name: mongodb
    spec:
      type: NodePort
      ports:
        - name: "27017"
          port: 27017
          targetPort: 27017
          nodePort: 30717
      selector:
        app: mongodb
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: mongodb
      name: mongodb
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: mongodb
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            app: mongodb
        spec:
          containers:
            - env:
                - name: MONGO_INITDB_ROOT_PASSWORD
                  value: admin
                - name: MONGO_INITDB_ROOT_USERNAME
                  value: admin
                - name: MONGO_INITDB_DATABASE
                  value: SudokuDB
              image: sudokus/mongo
              imagePullPolicy: IfNotPresent
              name: mongodb
              ports:
                - containerPort: 27017
              resources: {}
              volumeMounts:
                - mountPath: /data/db
                  name: mongodb-claim0
          restartPolicy: Always
          volumes:
            - name: mongodb-claim0
              persistentVolumeClaim:
                claimName: mongodb-claim0
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: mongodb-claim0
      name: mongodb-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  
  # RABBITMQ
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: rabbitmq
      name: rabbitmq
    spec:
      ports:
        - name: "5672"
          port: 5672
          targetPort: 5672
      selector:
        app: rabbitmq
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: rabbitmq
      name: rabbitmq-dashboard
    spec:
      type: NodePort
      ports:
        - name: "15672"
          port: 15672
          targetPort: 15672
          nodePort: 30672
      selector:
        app: rabbitmq
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: rabbitmq
      name: rabbitmq
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: rabbitmq
      strategy: {}
      template:
        metadata:
          labels:
            app: rabbitmq
        spec:
          containers:
            - env:
                - name: RABBITMQ_DEFAULT_PASS
                  value: bunny
                - name: RABBITMQ_DEFAULT_USER
                  value: bunny
              image: rabbitmq:3-management
              name: rabbitmq
              ports:
                - containerPort: 5672
                - containerPort: 15672
              resources: {}
          hostname: rabbitmq
          restartPolicy: Always
    status: {}
