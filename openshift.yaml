apiVersion: v1
kind: List
metadata: {}
items:
  # ROUTER
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: front
      annotations:
        haproxy.router.openshift.io/rewrite-target: /
      name: front
    spec:
      host: sudokus-fluix-dev.apps.sandbox-m2.ll9k.p1.openshiftapps.com
      path: /
      to:
        kind: Service
        name: front
      port:
        targetPort: "8090"
      tls:
        termination: edge
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: login
      annotations:
        haproxy.router.openshift.io/rewrite-target: /
      name: login
    spec:
      host: sudokus-fluix-dev.apps.sandbox-m2.ll9k.p1.openshiftapps.com
      path: /login
      to:
        kind: Service
        name: login
      port:
        targetPort: "8081"
      tls:
        termination: edge
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: highscores
      annotations:
        haproxy.router.openshift.io/rewrite-target: /
      name: highscores
    spec:
      host: sudokus-fluix-dev.apps.sandbox-m2.ll9k.p1.openshiftapps.com
      path: /highscores
      to:
        kind: Service
        name: highscores
      port:
        targetPort: "8085"
      tls:
        termination: edge
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: startsudoku
      annotations:
        haproxy.router.openshift.io/rewrite-target: /
      name: startsudoku
    spec:
      host: sudokus-fluix-dev.apps.sandbox-m2.ll9k.p1.openshiftapps.com
      path: /sudokus/start
      to:
        kind: Service
        name: startsudoku
      port:
        targetPort: "8082"
      tls:
        termination: edge
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: stopsudoku
      annotations:
        haproxy.router.openshift.io/rewrite-target: /
      name: stopsudoku
    spec:
      host: sudokus-fluix-dev.apps.sandbox-m2.ll9k.p1.openshiftapps.com
      path: /sudokus/stop
      to:
        kind: Service
        name: stopsudoku
      port:
        targetPort: "8084"
      tls:
        termination: edge
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: prometheus
      name: prometheus
    spec:
      host: prometheus-fluix-dev.apps.sandbox-m2.ll9k.p1.openshiftapps.com
      path: /
      to:
        kind: Service
        name: prometheus
      port:
        targetPort: "9090"
      tls:
        termination: edge

  # PROMETHEUS
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: prometheus
      name: prometheus
    spec:
      ports:
        - name: "9090"
          port: 9090
          targetPort: 9090
      selector:
        app: prometheus
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: prometheus
      name: prometheus
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: prometheus
      strategy: {}
      template:
        metadata:
          labels:
            app: prometheus
        spec:
          containers:
            - image: ghcr.io/cyberduc-k/sudokus-prometheus:main
              imagePullPolicy: Always
              name: prometheus
              ports:
                - containerPort: 9090
              resources: {}
              volumeMounts:
                - mountPath: /prometheus
                  name: prometheus
          restartPolicy: Always
          volumes:
            - name: prometheus
              persistentVolumeClaim:
                claimName: prometheus
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: prometheus
      name: prometheus
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}

  # FRONT
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: front
      name: front
    spec:
      ports:
        - name: "8090"
          port: 8090
          targetPort: 8081
      selector:
        app: front
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: front
      name: front
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: front
      strategy: {}
      template:
        metadata:
          labels:
            app: front
        spec:
          containers:
            - image: ghcr.io/cyberduc-k/sudokus-front:main
              imagePullPolicy: Always
              name: front
              ports:
                - containerPort: 8081
              resources: {}
          restartPolicy: Always
    status: {}

  # LOGIN
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: login
      name: login
    spec:
      ports:
        - name: "8081"
          port: 8081
          targetPort: 8081
      selector:
        app: login
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: login
      name: login
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: login
      strategy: {}
      template:
        metadata:
          labels:
            app: login
        spec:
          containers:
            - env:
                - name: MONGODB_CONNECTION
                  value: mongodb
                - name: MONGODB_PASSWORD
                  value: admin
                - name: MONGODB_USER
                  value: admin
              image: ghcr.io/cyberduc-k/sudokus-login:main
              imagePullPolicy: Always
              name: login
              ports:
                - containerPort: 8081
              resources: {}
          restartPolicy: Always
    status: {}

  # HIGHSCORES
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: highscores
      name: highscores
    spec:
      ports:
        - name: "8085"
          port: 8085
          targetPort: 8081
      selector:
        app: highscores
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: highscores
      name: highscores
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: highscores
      strategy: {}
      template:
        metadata:
          labels:
            app: highscores
        spec:
          containers:
            - env:
                - name: MONGODB_CONNECTION
                  value: mongodb
                - name: MONGODB_PASSWORD
                  value: admin
                - name: MONGODB_USER
                  value: admin
              image: ghcr.io/cyberduc-k/sudokus-highscores:main
              imagePullPolicy: Always
              name: highscores
              ports:
                - containerPort: 8081
              resources: {}
          restartPolicy: Always
    status: {}

  # START SUDOKU
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: startsudoku
      name: startsudoku
    spec:
      ports:
        - name: "8082"
          port: 8082
          targetPort: 8081
      selector:
        app: startsudoku
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: startsudoku
      name: startsudoku
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: startsudoku
      strategy: {}
      template:
        metadata:
          labels:
            app: startsudoku
        spec:
          containers:
            - env:
                - name: MONGODB_CONNECTION
                  value: mongodb
                - name: MONGODB_PASSWORD
                  value: admin
                - name: MONGODB_USER
                  value: admin
                - name: RABBITMQ_CONNECTION
                  value: rabbitmq
                - name: RABBITMQ_PASSWORD
                  value: bunny
                - name: RABBITMQ_USER
                  value: bunny
              image: ghcr.io/cyberduc-k/sudokus-start:main
              imagePullPolicy: Always
              name: startsudoku
              ports:
                - containerPort: 8081
              resources: {}
          restartPolicy: Always
    status: {}
  
  # GENERATE SUDOKU
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: generatesudoku
      name: generatesudoku
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: generatesudoku
      strategy: {}
      template:
        metadata:
          labels:
            app: generatesudoku
        spec:
          containers:
            - env:
                - name: MONGODB_CONNECTION
                  value: mongodb
                - name: MONGODB_PASSWORD
                  value: admin
                - name: MONGODB_USER
                  value: admin
                - name: RABBITMQ_CONNECTION
                  value: rabbitmq
                - name: RABBITMQ_PASSWORD
                  value: bunny
                - name: RABBITMQ_USER
                  value: bunny
              image: ghcr.io/cyberduc-k/sudokus-generate:main
              imagePullPolicy: Always
              name: generatesudoku
              ports:
                - containerPort: 8081
              resources: {}
          restartPolicy: Always
    status: {}

  # STOP SUDOKU
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: stopsudoku
      name: stopsudoku
    spec:
      ports:
        - name: "8084"
          port: 8084
          targetPort: 8081
      selector:
        app: stopsudoku
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: stopsudoku
      name: stopsudoku
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: stopsudoku
      strategy: {}
      template:
        metadata:
          labels:
            app: stopsudoku
        spec:
          containers:
            - env:
                - name: MONGODB_CONNECTION
                  value: mongodb
                - name: MONGODB_PASSWORD
                  value: admin
                - name: MONGODB_USER
                  value: admin
              image: ghcr.io/cyberduc-k/sudokus-stop:main
              imagePullPolicy: Always
              name: stopsudoku
              ports:
                - containerPort: 8081
              resources: {}
          restartPolicy: Always
    status: {}
  
  # MONGODB
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: mongodb
      name: mongodb
    spec:
      ports:
        - name: "27017"
          port: 27017
          targetPort: 27017
      selector:
        app: mongodb
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: mongodb
      name: mongodb
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: mongodb
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            app: mongodb
        spec:
          containers:
            - env:
                - name: MONGO_INITDB_ROOT_PASSWORD
                  value: admin
                - name: MONGO_INITDB_ROOT_USERNAME
                  value: admin
                - name: MONGO_INITDB_DATABASE
                  value: SudokuDB
              image: ghcr.io/cyberduc-k/sudokus-mongo:main
              imagePullPolicy: Always
              name: mongodb
              ports:
                - containerPort: 27017
              resources: {}
              volumeMounts:
                - mountPath: /data/db
                  name: mongodb-claim0
          restartPolicy: Always
          volumes:
            - name: mongodb-claim0
              persistentVolumeClaim:
                claimName: mongodb-claim0
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: mongodb-claim0
      name: mongodb-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  
  # RABBITMQ
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: rabbitmq
      name: rabbitmq
    spec:
      ports:
        - name: "5672"
          port: 5672
          targetPort: 5672
      selector:
        app: rabbitmq
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: rabbitmq
      name: rabbitmq-dashboard
    spec:
      ports:
        - name: "15672"
          port: 15672
          targetPort: 15672
      selector:
        app: rabbitmq
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: rabbitmq
      name: rabbitmq
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: rabbitmq
      strategy: {}
      template:
        metadata:
          labels:
            app: rabbitmq
        spec:
          containers:
            - env:
                - name: RABBITMQ_DEFAULT_PASS
                  value: bunny
                - name: RABBITMQ_DEFAULT_USER
                  value: bunny
              image: rabbitmq:3-management
              name: rabbitmq
              ports:
                - containerPort: 5672
                - containerPort: 15672
              resources: {}
          hostname: rabbitmq
          restartPolicy: Always
    status: {}
